{"status": true, "model": {"solved": true, "attempted": true, "can_be_viewed": true, "can_edit": true, "dynamic": true, "has_started": true, "has_ended": false, "countdown_time": 0, "requirements_description": null, "max_score": 1, "active": true, "epoch_starttime": null, "epoch_endtime": null, "time_left": null, "factor": 1, "expert_solution_status": false, "custom_tabs": null, "total_count": 62, "solved_count": 60, "success_ratio": 0.967741935483871, "is_editorial_available": false, "is_solution_unlocked": true, "contest_slug": "dam-m3", "topics": [], "user_score": 0.0, "id": 181018, "slug": "hello-name-3", "name": "Hello, NOM! #literals", "status": null, "created_at": "2020-09-19T14:03:51.000Z", "updated_at": "2020-10-05T14:01:48.000Z", "kind": "code", "preview": "Hello, NOM!", "codechecker_handle": null, "category": "ai", "deleted": false, "company_id": null, "difficulty_score": "0.0", "migrated_resource": null, "level": null, "is_custom": true, "player_count": 2, "custom_checker_language": "python", "checker_program": "{\"custom_checker_head\":\"\\n# Start of HEAD\\nfrom __future__ import division, print_function, unicode_literals, absolute_import\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"\\n# Start of BODY\\n'''\\nTestStruct::\\ntestcase_id                   [int] ID of the test-case\\ntestcase_input_path           [str] File path to test-case input\\ntestcase_output_path          [str] File path to test-case output generated by the problem solver\\ntestcase_expected_output_path [str] File path to test-case expected output to be matched with\\ntestcase_error_path           [str] File path to test-case STDERR\\nmetadata_file_paths           [list<str>] File paths to Question metadata (Extra files usually used for defining traning sets)\\nsubmission_code_path          [str] File path to submission source code\\nsubmission_language           [str] Language token of submission\\ntestcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line\\ntestcase_signal               [int] Exit code of the test-case process\\ntestcase_time                 [float] Time taken by the test-case process in seconds\\ntestcase_memory               [int] Peak memory of the test-case process determined in bytes\\ndata                          [str] <Future use>\\nResultStruct::\\nresult      [bool]  Assign test-case result. True determines success. False determines failure\\nscore       [float] Assign test-case score. Normalized between 0 to 1\\nmessage     [str] Assign test-case message. This message is visible to the problem solver\\n'''\\n\\nimport re\\n\\ndef run_custom_checker(t_obj, r_obj):\\n    # Don't print anything to STDOUT in this function\\n    # Enter your custom checker scoring logic here\\n\\n    result_data = ''\\n    try:\\n        result_data = open(t_obj.testcase_output_path, 'r').read()\\n    except IOError:\\n        r_obj.result = False\\n        r_obj.score = 0\\n        r_obj.message = 'Error reading result file'\\n        return\\n    \\n    \\n    if re.search(\\\"NOM\\\", result_data):\\n            r_obj.result = False;\\n            r_obj.score = 0;\\n            r_obj.message = \\\"Fail: canvia el NOM\\\";      \\n    elif re.search(\\\"^Hola, .+!$\\\", result_data):\\n        if re.search(\\\"<|>\\\", result_data):\\n            r_obj.result = True;\\n            r_obj.score = 0.5;\\n            r_obj.message = \\\"Success (pero havies de treure els < >)\\\";\\n        else:        \\n            r_obj.result = True;\\n            r_obj.score = 1.0;\\n            r_obj.message = \\\"Success\\\";\\n    else:\\n        r_obj.result = False;\\n        r_obj.score = 0;\\n        r_obj.message = \\\"Fail\\\";\\n\\n# End of BODY\\n        \",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.testcase_error_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.submission_language = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.testcase_error_path = root[\\\"error_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.submission_language = root[\\\"submission_language\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score <= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) <= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) < 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}", "judgebot_language": null, "judgebot": null, "onboarding": null, "compile_and_test": true, "languages": ["java8"], "is_text": false, "custom": true, "track": null, "custom_case": true, "submit_disabled": false, "public_test_cases": true, "public_solutions": false, "can_solve": true, "company": null, "difficulty": 0.6, "color": null, "primary_contest": null, "solved_score": 1.0, "available_translations": [], "leaderboard_out_of_sync": null, "leaderboard_out_of_sync_message": null, "require_unlock": false, "show_skeliton": null, "difficulty_name": "Medium", "default_language": null, "c_template": "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\n\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    return 0;\n}", "c_template_head": "", "c_template_tail": "", "cpp_template": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cstdlib>\n#include <fstream>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    return 0;\n}", "cpp_template_head": "", "cpp_template_tail": "", "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    public static void main(String args[] ) throws Exception {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}", "java_template_head": "", "java_template_tail": "", "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace Solution {\nclass Solution {\n    static void Main(string[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    }\n}\n}", "csharp_template_head": "", "csharp_template_tail": "", "php_template": "<?php\n /* Enter your code here. Read input from STDIN. Print output to STDOUT */", "php_template_head": "", "php_template_tail": "", "ruby_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "ruby_template_head": "", "ruby_template_tail": "", "python_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "python_template_head": "", "python_template_tail": "", "perl_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "perl_template_head": "", "perl_template_tail": "", "haskell_template": "main :: IO ()\nmain = do\n-- Enter your code here. Read input from STDIN. Print output to STDOUT\nreturn ()", "haskell_template_head": "", "haskell_template_tail": "", "clojure_template": "; Enter your code here. Read input from STDIN. Print output to STDOUT", "clojure_template_head": "", "clojure_template_tail": "", "scala_template": "// main method in \"Solution\" will be run as your answer\nobject Solution {\n\n    def main(args: Array[String]) {\n        //Enter your code here. Read input from STDIN. Print output to STDOUT\n    }\n\n}", "scala_template_head": "", "scala_template_tail": "", "bash_template_head": "", "bash_template_tail": "", "lua_template": "-- Enter your code here. Read input from STDIN. Print output to STDOUT", "lua_template_head": "", "lua_template_tail": "", "erlang_template": "% Enter your code here. Read input from STDIN. Print output to STDOUT\n% Your class should be named solution\n\n-module(solution).\n-export([main/0]).\n\nmain() ->\n.\n", "erlang_template_head": "", "erlang_template_tail": "", "javascript_template": "process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n    // now we can read/parse input\n});", "javascript_template_head": "", "javascript_template_tail": "", "go_template": "package main\nimport \"fmt\"\n\nfunc main() {\n    //Enter your code here. Read input from STDIN. Print output to STDOUT\n}", "go_template_head": "", "go_template_tail": "", "d_template": "/* Enter your code here. Read input from STDIN. Print output to STDOUT */", "d_template_head": "", "d_template_tail": "", "ocaml_template": "(* Enter your code here. Read input from STDIN. Print output to STDOUT *)", "ocaml_template_head": "", "ocaml_template_tail": "", "pascal_template": "(* Enter your code here. Read input from STDIN. Print output to STDOUT *)", "pascal_template_head": "", "pascal_template_tail": "", "sbcl_template": ";; Enter your code here. Read input from STDIN. Print output to STDOUT", "sbcl_template_head": "", "sbcl_template_tail": "", "python3_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "python3_template_head": "", "python3_template_tail": "", "groovy_template": "//Enter your code here. Read input from STDIN. Print output to STDOUT", "groovy_template_head": "", "groovy_template_tail": "", "objectivec_template": "#import <objc/objc.h>\n#import <objc/Object.h>\n#import <Foundation/Foundation.h>\n\nint main ( int argc, const char *argv[] ) {\n    //Enter your code here. Read input from STDIN. Print output to STDOUT\n    return 0;\n}", "objectivec_template_head": "", "objectivec_template_tail": "", "fsharp_template": "//Enter your code here. Read input from STDIN. Print output to STDOUT", "fsharp_template_head": "", "fsharp_template_tail": "", "visualbasic_template": "'Enter your code here. Read input from STDIN. Print output to STDOUT", "visualbasic_template_head": "", "visualbasic_template_tail": "", "lolcode_template_head": "", "lolcode_template_tail": "", "smalltalk_template": "\"Enter your code here. Read input from STDIN. Print output to STDOUT\"", "smalltalk_template_head": "", "smalltalk_template_tail": "", "tcl_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "tcl_template_head": "", "tcl_template_tail": "", "java8_template": "public class Solution {\n\n    public static void main(String[] args) {\n        System.out.println(\"Hola, <NOM>!\");\n    }\n}", "r_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "r_template_head": "", "r_template_tail": "", "racket_template": "#lang racket\n; Enter your code here. Read input from STDIN. Print output to STDOUT", "racket_template_head": "", "racket_template_tail": "", "rust_template": "// Enter your code here. Read input from STDIN. Print output to STDOUT", "rust_template_head": "", "rust_template_tail": "", "fortran_template": "! Enter your code here. Read input from STDIN. Print output to STDOUT", "fortran_template_head": "", "fortran_template_tail": "", "swift_template": "// Enter your code here. Read input from STDIN. Print output to STDOUT", "swift_template_head": "", "swift_template_tail": "", "ada_template": "with Ada.Text_IO, Ada.Integer_Text_IO;\\nuse Ada;\\n\\nprocedure Solution is\\n-- Enter your code here. Read input from STDIN. Print output to STDOUT\\n\\n\\nend Solution", "ada_template_head": "", "ada_template_tail": "", "cpp14_template": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <string>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <climits>\n#include <cstring>\n#include <cstdlib>\n#include <fstream>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\nint main() {\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n    return 0;\n}", "cpp14_template_head": "", "cpp14_template_tail": "", "coffeescript_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "coffeescript_template_head": "", "coffeescript_template_tail": "", "elixir_template": "defmodule Solution do\n#Enter your code here. Read input from STDIN. Print output to STDOUT\nend", "elixir_template_head": "", "elixir_template_tail": "", "pypy_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "pypy_template_head": "", "pypy_template_tail": "", "pypy3_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "pypy3_template_head": "", "pypy3_template_tail": "", "julia_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT", "julia_template_head": "", "julia_template_tail": "", "kotlin_template": "import java.io.*;\nimport java.util.*\nimport java.text.*\nimport java.math.*\nimport java.util.regex.*\n\n  fun main(args: Array<String>) {\n      /* Enter your code here. Read input from STDIN. Print output to STDOUT */\n  }", "kotlin_template_head": "", "kotlin_template_tail": "", "dart_template": "// Enter your code here. Read input from STDIN. Print output to STDOUT", "dart_template_head": "", "dart_template_tail": "", "hacker": {"id": 5237175, "username": "gerardfp1", "avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", "is_admin": false}, "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>En el seg\u00fcent codi, posa el teu nom en lloc de <code>&lt;NOM&gt;</code> (e.g. <code>JOAN</code>).</p>\n\n<p>La teva soluci\u00f3 no ha de tenir <code>&lt;&gt;</code>.</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>-</p></div></div></div><div class='challenge_constraints'><div class='msB challenge_constraints_title'><p><strong>Constraints</strong></p></div><div class='msB challenge_constraints_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>-</p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>-</p></div></div></div>", "author_name": "gerardfp1", "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", "version_ids": [], "bookmarked": false, "is_preview_contest": false, "visual_output_flag": false, "real_dynamic": false, "submitted_hackers_count": 62, "has_all_test_cases_public": false, "moderator_or_support": true}}